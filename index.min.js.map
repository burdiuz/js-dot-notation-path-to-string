{"version":3,"file":"index.min.js","sources":["source/index.js"],"sourcesContent":["/**\n * Wrap any value with AsIs() to pass it to string as is without ant wrapping\n * or dot prior to name.\n * @param {*} value\n */\nfunction AsIs(value) {\n  if (this instanceof AsIs) {\n    this.value = value;\n  } else {\n    return new AsIs(value);\n  }\n}\n\nfunction asIs() {\n  return this.value;\n}\n\nAsIs.prototype.toString = asIs;\nAsIs.prototype.valueOf = asIs;\nAsIs.prototype[Symbol.toPrimitive] = asIs;\n\n/**\n *\n * @param {String} str\n * @param {String|AsIs|Number} name\n */\nconst appendPathNameToString = (str, name) => {\n  const string = String(str) || '';\n\n  if (name instanceof AsIs) {\n    return `${string}${name}`;\n  }\n\n  if (typeof name === 'symbol') {\n    return `${string}[${name}]`;\n  }\n\n  if (String(parseInt(name, 10)) === name) {\n    return `${string}[${name}]`;\n  }\n\n  if (/^[a-z_$][\\w\\d$_]*$/i.test(name)) {\n    return string ? `${string}.${name}` : name;\n  }\n\n  return `${string}[\"${name}\"]`;\n};\n\nclass PathSequence {\n  constructor(value) {\n    this.value = value ? String(value) : '';\n    this.lastName = undefined;\n  }\n\n  append(name) {\n    this.value = appendPathNameToString(this.value, name);\n    this.lastName = name;\n  }\n\n  appendCustomValue(customString) {\n    this.value = appendPathNameToString(this.value, AsIs(customString));\n    this.lastName = customString;\n  }\n\n  clone(nextName = undefined) {\n    const sequence = new PathSequence(this.value);\n\n    if (nextName === undefined) {\n      sequence.lastName = this.lastName;\n    } else {\n      sequence.append(nextName);\n    }\n\n    return sequence;\n  }\n\n  getLastName() {\n    return this.lastName;\n  }\n\n  toString() {\n    return this.value;\n  }\n\n  valueOf() {\n    return this.value;\n  }\n}\n\n/**\n *\n * @returns {Array<String|Number|AsIs>}\n */\nexport const createPathSequence = (value) => new PathSequence(value);\n\nexport default PathSequence;\n"],"names":["AsIs","value","this","asIs","prototype","toString","valueOf","Symbol","toPrimitive","appendPathNameToString","str","name","string","String","parseInt","test","PathSequence","lastName","undefined","customString","nextName","sequence","append"],"mappings":"+LAKA,SAASA,EAAKC,QACRC,gBAAgBF,UAGX,IAAIA,EAAKC,QAFXA,MAAQA,EAMjB,SAASE,WACAD,KAAKD,MAGdD,EAAKI,UAAUC,SAAWF,EAC1BH,EAAKI,UAAUE,QAAUH,EACzBH,EAAKI,UAAUG,OAAOC,aAAeL,EAOrC,MAAMM,EAAyB,CAACC,EAAKC,WAC7BC,EAASC,OAAOH,IAAQ,UAE1BC,aAAgBX,KACRY,IAASD,IAGD,iBAATA,KACCC,KAAUD,KAGlBE,OAAOC,SAASH,EAAM,OAASA,KACvBC,KAAUD,KAGlB,sBAAsBI,KAAKJ,GACtBC,KAAYA,KAAUD,IAASA,KAG9BC,MAAWD,aAGjBK,cACQf,QACLA,MAAQA,EAAQY,OAAOZ,GAAS,QAChCgB,cAAWC,SAGXP,QACAV,MAAQQ,EAAuBP,KAAKD,MAAOU,QAC3CM,SAAWN,oBAGAQ,QACXlB,MAAQQ,EAAuBP,KAAKD,MAAOD,EAAKmB,SAChDF,SAAWE,QAGZC,SACEC,EAAW,IAAIL,EAAad,KAAKD,mBAEtBiB,IAAbE,IACOH,SAAWf,KAAKe,WAEhBK,OAAOF,GAGXC,uBAIAnB,KAAKe,2BAILf,KAAKD,uBAILC,KAAKD,4BAQmBA,CAAAA,GAAU,IAAIe,EAAaf"}