{"version":3,"file":"index.js","sources":["source/index.js"],"sourcesContent":["/**\n * Wrap any value with AsIs() to pass it to string as is without ant wrapping\n * or dot prior to name.\n * @param {*} value\n */\nfunction AsIs(value) {\n  if (this instanceof AsIs) {\n    this.value = value;\n  } else {\n    return new AsIs(value);\n  }\n}\n\nfunction asIs() {\n  return this.value;\n}\n\nAsIs.prototype.toString = asIs;\nAsIs.prototype.valueOf = asIs;\nAsIs.prototype[Symbol.toPrimitive] = asIs;\n\n/**\n *\n * @param {String} str\n * @param {String|AsIs|Number} name\n */\nconst appendPathNameToString = (str, name) => {\n  const string = String(str) || '';\n\n  if (name instanceof AsIs) {\n    return `${string}${name}`;\n  }\n\n  if (String(parseInt(name, 10)) === name) {\n    return `${string}[${name}]`;\n  }\n\n  if (/^[a-z_$][\\w\\d$_]*$/i.test(name)) {\n    return string ? `${string}.${name}` : name;\n  }\n\n  return `${string}[\"${name}\"]`;\n};\n\nclass PathSequence {\n  constructor(value) {\n    this.value = value ? String(value) : '';\n    this.lastName = undefined;\n  }\n\n  append(name) {\n    this.value = appendPathNameToString(this.value, name);\n    this.lastName = name;\n  }\n\n  appendCustomValue(customString) {\n    this.value = appendPathNameToString(this.value, AsIs(customString));\n    this.lastName = customString;\n  }\n\n  clone(nextName = undefined) {\n    const sequence = new PathSequence(this.value);\n\n    if (nextName === undefined) {\n      sequence.lastName = this.lastName;\n    } else {\n      sequence.append(nextName);\n    }\n\n    return sequence;\n  }\n\n  getLastName() {\n    return this.lastName;\n  }\n\n  toString() {\n    return this.value;\n  }\n\n  valueOf() {\n    return this.value;\n  }\n}\n\n/**\n *\n * @returns {Array<String|Number|AsIs>}\n */\nexport const createPathSequence = (value) => new PathSequence(value);\n\nexport default PathSequence;\n"],"names":["AsIs","value","asIs","prototype","toString","valueOf","Symbol","toPrimitive","appendPathNameToString","str","name","string","String","parseInt","test","PathSequence","lastName","undefined","customString","nextName","sequence","append","createPathSequence"],"mappings":";;;;AAAA;;;;;AAKA,SAASA,IAAT,CAAcC,KAAd,EAAqB;MACf,gBAAgBD,IAApB,EAA0B;SACnBC,KAAL,GAAaA,KAAb;GADF,MAEO;WACE,IAAID,IAAJ,CAASC,KAAT,CAAP;;;;AAIJ,SAASC,IAAT,GAAgB;SACP,KAAKD,KAAZ;;;AAGFD,KAAKG,SAAL,CAAeC,QAAf,GAA0BF,IAA1B;AACAF,KAAKG,SAAL,CAAeE,OAAf,GAAyBH,IAAzB;AACAF,KAAKG,SAAL,CAAeG,OAAOC,WAAtB,IAAqCL,IAArC;;;;;;;AAOA,MAAMM,yBAAyB,CAACC,GAAD,EAAMC,IAAN,KAAe;QACtCC,SAASC,OAAOH,GAAP,KAAe,EAA9B;;MAEIC,gBAAgBV,IAApB,EAA0B;WAChB,GAAEW,MAAO,GAAED,IAAK,EAAxB;;;MAGEE,OAAOC,SAASH,IAAT,EAAe,EAAf,CAAP,MAA+BA,IAAnC,EAAyC;WAC/B,GAAEC,MAAO,IAAGD,IAAK,GAAzB;;;MAGE,sBAAsBI,IAAtB,CAA2BJ,IAA3B,CAAJ,EAAsC;WAC7BC,SAAU,GAAEA,MAAO,IAAGD,IAAK,EAA3B,GAA+BA,IAAtC;;;SAGM,GAAEC,MAAO,KAAID,IAAK,IAA1B;CAfF;;AAkBA,MAAMK,YAAN,CAAmB;cACLd,KAAZ,EAAmB;SACZA,KAAL,GAAaA,QAAQW,OAAOX,KAAP,CAAR,GAAwB,EAArC;SACKe,QAAL,GAAgBC,SAAhB;;;SAGKP,IAAP,EAAa;SACNT,KAAL,GAAaO,uBAAuB,KAAKP,KAA5B,EAAmCS,IAAnC,CAAb;SACKM,QAAL,GAAgBN,IAAhB;;;oBAGgBQ,YAAlB,EAAgC;SACzBjB,KAAL,GAAaO,uBAAuB,KAAKP,KAA5B,EAAmCD,KAAKkB,YAAL,CAAnC,CAAb;SACKF,QAAL,GAAgBE,YAAhB;;;QAGIC,WAAWF,SAAjB,EAA4B;UACpBG,WAAW,IAAIL,YAAJ,CAAiB,KAAKd,KAAtB,CAAjB;;QAEIkB,aAAaF,SAAjB,EAA4B;eACjBD,QAAT,GAAoB,KAAKA,QAAzB;KADF,MAEO;eACIK,MAAT,CAAgBF,QAAhB;;;WAGKC,QAAP;;;gBAGY;WACL,KAAKJ,QAAZ;;;aAGS;WACF,KAAKf,KAAZ;;;YAGQ;WACD,KAAKA,KAAZ;;;;;;;;AAQJ,MAAaqB,qBAAsBrB,KAAD,IAAW,IAAIc,YAAJ,CAAiBd,KAAjB,CAAtC;;;;;"}